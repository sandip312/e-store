{"ast":null,"code":"// import React, { createContext, useState } from 'react';\n\n// export const CartContext = createContext();\n\n// const CartContextProvider = ({ children }) => {\n//   const [cart, setCart] = useState([]);\n\n//   const addToCart = (product, quantity) => {\n//     const existingProductIndex = cart.findIndex(item => item.id === product.id);\n//     if (existingProductIndex >= 0) {\n//       const updatedCart = [...cart];\n//       updatedCart[existingProductIndex].quantity += quantity;\n//       setCart(updatedCart);\n//     } else {\n//       setCart([...cart, { ...product, quantity }]);\n//     }\n//   };\n\n//   const removeFromCart = (productId) => {\n//     const updatedCart = cart.filter(item => item.id !== productId);\n//     setCart(updatedCart);\n//   };\n\n//   const clearCart = () => {\n//     setCart([]);\n//   };\n\n//   const cartTotal = cart.reduce((total, item) => {\n//     return total + (item.price * item.quantity);\n//   }, 0);\n\n//   const cartItemsCount = cart.reduce((count, item) => {\n//     return count + item.quantity;\n//   }, 0);\n\n//   return (\n//     <CartContext.Provider value={{ cart, addToCart, removeFromCart, clearCart, cartTotal, cartItemsCount }}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export default CartContextProvider;","map":{"version":3,"names":[],"sources":["C:/Users/pauda/OneDrive/Desktop/e-commerce/new/src/cart/cartcontext.js"],"sourcesContent":["// import React, { createContext, useState } from 'react';\r\n\r\n// export const CartContext = createContext();\r\n\r\n// const CartContextProvider = ({ children }) => {\r\n//   const [cart, setCart] = useState([]);\r\n\r\n//   const addToCart = (product, quantity) => {\r\n//     const existingProductIndex = cart.findIndex(item => item.id === product.id);\r\n//     if (existingProductIndex >= 0) {\r\n//       const updatedCart = [...cart];\r\n//       updatedCart[existingProductIndex].quantity += quantity;\r\n//       setCart(updatedCart);\r\n//     } else {\r\n//       setCart([...cart, { ...product, quantity }]);\r\n//     }\r\n//   };\r\n\r\n//   const removeFromCart = (productId) => {\r\n//     const updatedCart = cart.filter(item => item.id !== productId);\r\n//     setCart(updatedCart);\r\n//   };\r\n\r\n//   const clearCart = () => {\r\n//     setCart([]);\r\n//   };\r\n\r\n//   const cartTotal = cart.reduce((total, item) => {\r\n//     return total + (item.price * item.quantity);\r\n//   }, 0);\r\n\r\n//   const cartItemsCount = cart.reduce((count, item) => {\r\n//     return count + item.quantity;\r\n//   }, 0);\r\n\r\n//   return (\r\n//     <CartContext.Provider value={{ cart, addToCart, removeFromCart, clearCart, cartTotal, cartItemsCount }}>\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default CartContextProvider;\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}